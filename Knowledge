LEARNING ROADMAP 34
JOBMARKET 68

 
APP IS NOT WORKING Guideline 🔎 170
HOSTING Guideline 190 


SSL CERTIFICATE INSTALLATION - 367
PUSH FILE/FOLDER TO GITHUB 520
NGINX - 
IMPROVE DEV & WEB PERFORMANCE 445


*****************************
_____________________________
*****************************





Object Oriented Programming Leanguages  |   Functional Leanguages   |   Systems Leanguages  |   Modern Leanguages  |   Dynamic Leanguages
                                                                                                                       Scripting Leanguage
             Java                                                             Rust                                                   
                                                                                                                            Javascript




BRIEF JS HISTORY overview: js course lecture 30




          GENERELL
          ________

1. RULE - > RE-USE !
2. RULE - > RE-USE !
3. RULE - > RE-USE !

   - > DON'T REINVENT THE WHEEL


3 RULES
_______

S SIMPLE -> around 2 key featues is enough
L LOVEABLE -> good UI / UX                    REALY IMPORTANT - humans are shallow (oberflächlich)   schönheit zählt (leider).  -> https://mobbin.com/ + https://ui.shadcn.com/examples/authentication
C COMPLETE



Learn the CONCEPTS - DONT learn the SYNTAX and the LEANGUAGE -> cause Concepts than can be applyed to every leanguage
Understand what are u doing (Understand how to solve a problem) - DONT remember code snippets etc.

create SIMPLE / PRACTICAL websites -> LESS IS MORE
(what is the user looking for -> deliver that! Thats all) => GOOD UX DESIGN
-> USER FRIENDLY WEBSITE
-> FOCUS ON HELPING USERS


5 PARTS
_______

- LAYOUT

- TYPOGRAPHY  1 FONT per Page is enough, if possible

- COLORS      3 - 5 colors (2 are blocked for a white and a black tone) -> LESS IS MORE

- IMAGES      "PICTURES SAY MORE THAN 1000 WORDS" -> LESS IS MORE (DONT fill up with waste)
    
     -> clean up images https://pixelied.com/convert/jpg-converter/jpg-to-webp


- *CONTENT*   "CONTENT IS KING"


NO COMPLICATED / BEAUTIFUL websites! 
(if he wanna listen to music -> deliver music, 
-> dont make it beautiful or hard to find what the user is looking for) => BAD UX DESIGN

-> NOT USER FRIENDLY
-> NO FOCUS ON IMPRESSING USERS -> WEBDEV is NO ART!




          LEARNING ROADMAP
          ________________

https://www.youtube.com/watch?v=dPMk6_HTBq8&ab_channel=ConnerArdman


1. HTML
2. CSS                FONTEND
3. Javascript

4. Node JS + Express
5. Databases          BACKEND

6. VUE / React
7. Typescript         FRAMEWORKS and LIBRARYS (to simplify development)




BACKEND-STACK === 

https://medium.com/gdg-vit/which-backend-stack-should-you-learn-e4935dfe81bd


Tech Stack 1: Node.js, Express.js, and MongoDB

Tech Stack 2: Python, Django, and PostgreSQL

Tech Stack 3: Python, FastAPI, and PostgreSQL




         JOBMARKET
         _________

https://www.dnxjobs.de/

https://getremote.de/jobs/

https://remotely.de

https://gulp.de




          LOCAL DEVELOPMENT (without backend)
          _________________

terminal command: 
-> live-server

or live-server button in vscode




      Databases
      _________

SQL      |     NoSQL

mySQL         mongoDB

Firebase (maybe, should be nice)  is an hybrid of SQL and NoSQL




          Cloud Computing
          _______________
    
IaaS           |           PaaS            |           SaaS


·DigitalOcean




          2023 Future Skills (most recommended)
          _____________________________________

· Cyber Security ( in real life-> way to hard to find a job, cause at least 5-10 years of expirience is required!)




          FYI - HOW IS A WEBSITE OR PROGRAMM TESTED TO FIND OUT WHEN ITS COLLAPSING
          _________________________________________________________________________

FAB: through the socked and inodes the computer offers

most of the time, all stuff will be "LOAD BALANCED" over several systems




          APP IS NOT WORKING GUIDELINE 🔎 
          _______________________________

STOP running app -> control + c
(RE)START app -> npm start (in most cases)
CHECK "scripts" (names) at package.json file
if we use length -> check, is it correctly written
REMEMBER -> Code runs always from top to bottom of the file -> 

router.route('/:id')
      .get(userController.getUser)
      .patch(userController.updateUser)
      .delete(userController.deleteUser);



WHEN WORKING WITH DB
____________________

1. mongoDB website -> CONNECT TO DB
2. mongoDB COMPASS -> CONNECT via link (FROM mongoDB website) 
   -> mongodb+srv://<username>:<password>@clusterfree.rqbxxxyhwe.mongodb.net/
2.2 node app -> .env file db setup: -> mongodb+srv://<username>:<password>@clusterfree.rqbxxxyhwe.mongodb.net/
     etc.
3. TESTING connection with POSTMAN




          HOSTING Guideline
          _________________ 

NOTE:

BEFORE finally Hosting -> IMPRESSUM has to be done !


          
FIRST we host a node.js App !
SECOND we need a provider who supports node.js hosting !
     
HOSTING PROVIDERS:  alfahosting
                    digitalocean
                    godaddy

                    vercel - https://vercel.com/
                    coolify - https://coolify.io/
                    netlify - https://www.netlify.com/reports/gartner-magic-quadrant-visionary/?utm_content=eyebrow



DOMAIN PART
___________

BUY a domain -> godaddy
CHANGE Nameservers at godaddy with the NS from digitalocean:

                                        ns1.digitalocean.com
                                        ns2.digitalocean.com
                                        ns3.digitalocean.com

GO to MAC (NOT digitalocean) Terminal: 

command: whois <domain>
         whois tbsshrdev.com


SCROLL DOWN (somewhere to the middle we should see:)

Domain Name: TBSSHRDEV.COM
   Registry Domain ID: 2810912145_DOMAIN_COM-VRSN
   Registrar WHOIS Server: whois.godaddy.com
   Registrar URL: http://www.godaddy.com
   Updated Date: 2023-09-09T07:01:26Z
   Creation Date: 2023-09-03T14:31:52Z
   Registry Expiry Date: 2024-09-03T14:31:52Z
   Registrar: GoDaddy.com, LLC
   Registrar IANA ID: 146
   Registrar Abuse Contact Email: abuse@godaddy.com
   Registrar Abuse Contact Phone: 480-624-2505
   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited
   Domain Status: clientRenewProhibited https://icann.org/epp#clientRenewProhibited
   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited
   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited
   Name Server: NS1.DIGITALOCEAN.COM
   Name Server: NS2.DIGITALOCEAN.COM
   Name Server: NS3.DIGITALOCEAN.COM


-> now we should see the 3 NS 

-> means we are successful connected



OR

https://de.godaddy.com/whois/results.aspx?domain=tbsshrdev.com

put in the domain youre looking for in the search field

-> look for the NS 



SSL CERTIFICATE PART
____________________

BUY SSL Certificate -> godaddy


https://ssltools.godaddy.com/views/certChecker



CODING PART
___________

1. Use Environment Variables:
- Avoid hard-codes values in your code, like sensitive data, like api keys, personal data etc.

For DEPLOYMENT:

const port = process.env.PORT || 3000; // for real deployment -> protected usage


2. set secure response headers  -> https://helmetjs.github.io

npm install helmet --save

var helmet = require('helmet');
 
 app.use(helmet());

 
3. Configure logging
4. Use SSL / TSL , important- but the most hoster make that for us 
5. change (picture etc.) paths/relative paths to -> https://......



DIGITALOCEAN - IaaS (Infastructure as a Service)
____________  

IaaS (Infastructure as a Service) = Digitalocean, AWS, Azure etc.


FAB

oben statt ubuntu auf debian
premium AMD -> mach auf regular (also die erste Auswahl)


https://www.digitalocean.com/community/tutorials/initial-server-setup-with-debian-10
https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-debian-10


DNS RECORDS und NAMESERVER einrichten   ->   https://docs.digitalocean.com/tutorials/dns-registrars/




SSH:   
____  

ssh root@ip  -> (ip vom droplet)

droplet pw entering => root host pw


to exit ssh connection:

in terminal: exit



SCP   
___ 

TRANSFER to -> *** REMOTE *** (root) SERVER
___________________________________________

in terminal:
(alles!) scp -r . root@46.101.155.88:/var/www/buy-deny-try.com/    -> to upload all content from the folder where iam currently in
(optional) scp -r * ..... nur sichtbare dateien 

scp -r folder name User name@HostIp:dropletname

scp -r foldername root@ip:/folder/new_foldername _/_/_/
scp -r file.tar root@ip:/root/file.tar   _/_/_/

scp -r app.js root@ip:/root/subfolder/app.js


multiple files at ones:
scp -r e58da54bfe2e0c7b.crt e58da54bfe2e0c7b.pem gd_bundle-g2-g1.crt key.pem root@46.101.155.88:


move multiple files at ones:

move  file       file    file destination
⬇️     ⬇️          ⬇️       ⬇️     ⬇️
mv bundle.crt cert.crt kp.pem tbsshrdev/





file directly:
scp app.js root@ip:/root/folder/app.js


digitalocean root: terminal commend: tar -xvf file.tar     -> zum tar entpacken


TAR create and extract

$ tar -cvf wanted file name   existing file



npm cache clean -f



TRANSFER FILE/FOLDER FROM *** REMOTE *** (root) SERVER -> to LOCAL PC(MAC)
__________________________________________________________________________

we create a copy of the folder/file and paste it into our local system



scp -r remote server directory@ip:/remote server directory/file(or folder) /target-directory

->
scp -r root@ip:/root/file(or folder) /Users/username/directory




PM2    
___

npm PM2     keeps the app running     https://pm2.keymetrics.io/docs/usage/quick-start/

npm install pm2@latest -g
sudo npm install pm2 -g

pm2 start app.js
pm2 stop app.js
pm2 status            checking the status of pm2 activitys

pm2 restart app.js
pm2 logs              see all errors


pm2 delete <id>       clears the cache of pm2 from <id> 
pm2 delete all        clears the cache of pm2


pm2 monit             monitoring



pm2 start app.js      keeps pm2 running while changing the app       // VIDEO CHECK AGAIN for the command



   WHEN APP IS IN PROD AND RUNNING
   _______________________________

make changes 
npm run build
pm2 reload <app-name>


-> no need to   pm2 stop, npm run build, pm2 stop




          PORTS opening etc:    
          __________________  

https://www.digitalocean.com/community/tutorials/opening-a-port-on-linux


Netcat install:
sudo apt-get install netcat


OPEN PORT 443 (debian/linux):
sudo iptables -I INPUT -p tcp -m tcp –dport 443 -j ACCEPT


LIST OF ALL PORTS
_________________

cat /etc/services

NOTE:

port 80 -> http standard
port 443 -> https standard



          SSL CERTIFICATE INSTALLATION                
          ____________________________

https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm

-> go to terminal on mac
-> command: 

openssl version -a


GENERAL EXPLAINATION
____________________

Create a new Folder on desktop for ssl files
First we have generate a private key in the in local terminal via openssl.
Then we use the new generated key to gennrate a .crs file from it.
csr file vefifizieren: openssl req -text -in yourdomain.csr -noout -verify -> we should see: "verify ok"
***
Now we can use the .crs file here -> https://certs.godaddy.com/cert/details/ncsjybuzpqfphfzzdwzxwcgfel3salgk?cb=&app=
-> go to "Zertifikat verwalten" left side in the middle
-> go to "Zertifikat mit neuen Schlüssel versehen."
-> put in the content of the .crs file in the input field:

-----BEGIN CERTIFICATE REQUEST-----
......
-----END CERTIFICATE REQUEST-----

-> Scroll down -> Button: "Alle Änderungen senden"

-> we will get an email after some time

-> NOW we use the link from email

-> Zertifikat herunterladen - Servertyp = sonstige

ALL inside the NEW folder were the key and csr file already is

NOW we have 5 files (key, csr, Zertifikate: xxx.crt, xxx.pem, bundle.crt)

-> we need 3 files: key, .crt, bundle.crt

-> rename all

-> include in app.js 



STEPS
_____

FIRST -> GENERATING PRIVATE KEY: openssl genrsa -out yourdomain.key 2048 
SECOND -> openssl req -new -key yourdomain.key -out yourdomain.csr
THIRD -> openssl req -text -in yourdomain.csr -noout -verify -> we should see: "verify ok"
NEXT -> *** watch above



OLD_______________

https://de.godaddy.com/help/fordern-sie-mein-ssl-zertifikat-fur-eine-primare-domain-in-meinem-godaddy-hostingkonto-an-etwa-linux-cpanel-windows-plesk-oder-eine-website-mit-website-baukasten-v7-40439    
      
https://stackoverflow.com/questions/11804202/how-do-i-setup-a-ssl-certificate-for-an-express-js-server     
      
https://stackoverflow.com/questions/11744975/enabling-https-on-express-js     _/_/_/


1. download the ssl key file from domain provider: 

https://de.godaddy.com/help/apache-generieren-einer-zertifikatsignieranforderung-csr-5269
-> in terminal WHEN BEEING IN THE DROPLET VIA SSH: 
-> openssl req -new -newkey rsa:2048 -nodes -keyout Ihre Domain.key -out Ihre Domain.csr


2. download the ssl certificate: https://certs.godaddy.com/cert/details/kopff41nq748tmdrw8pgpt6xjezbhwnc?cb=&app=


3. add the files to the root folder!



app.js file:

const fs = require('fs');
var privateKey = fs.readFileSync( 'privatekey.pem' );
var certificate = fs.readFileSync( 'certificate.pem' );


https.createServer({
    key: privateKey,
    cert: certificate
}, app).listen(443);        




OPTIONAL: https://www.ssl.com/how-to/manually-generate-a-certificate-signing-request-csr-using-openssl/




          IF THE BROWSER IS CHANGING AUTOMATICLY FROM HTTP to HTTPS 
          _________________________________________________________      
  
  -> https://superuser.com/questions/565409/how-to-stop-an-automatic-redirect-from-http-to-https-in-chrome
  
  
  HTTPS Website app.js setup
  
  https://stackoverflow.com/questions/11744975/enabling-https-on-express-js/11745114#11745114




          PUSH FILE/FOLDER TO GITHUB
          __________________________

https://www.youtube.com/watch?v=tlu5e0TxSzo&ab_channel=GitHub


1. create a repository on github
1.2 in mac terminal git -v
2. go to directory of the file/folder we wanna upload

-> one command after the other in terminal:
git init
git commit -m "initial commit"  (OLD - git commit -m "first commit")
git status
git branch -M main
git remote add origin https://github.com/myN3RD/myRepositoryName.git -> COPY LINK
git push -u origin main

-> we will be promt to put in username at gitHub 
-> after we should put in pw -> ITS a TOKEN and no pw! -> go here: https://github.com/settings/tokens

3. we are prompt to put in username on github
4. we are prompt for our pw/token! on github 
   *********** -> NOTE: its NOT the pw -> instead we use our github token
-> we generate the token on github: https://github.com/settings/tokens


OPTIONAL -> if we have something wrong -> we just clear git -> git remote remove origin


NOTE:

if files beeing green after using git -> restart vscode (worked ones already)





          NGINX
          _____

DELETE FIRST  sudo apt remove nginx   OPTIONAL
              sudo apt purge nginx    BEST WAY
              sudo apt-get autoremove

https://www.baeldung.com/linux/nginx-uninstall

CHECK IF ITS STILL THERE  ->  nginx -v



2. Install Nginx

sudo apt update
sudo apt install nginx
nginx -v





3.  

cd /etc/nginx/sites-enabled
ls                                  -> we see a default folder
ls -l /etc/nginx/sites-enabled      -> to see all enabled sites




4. create a new conf file
cd /etc/nginx/sites-available
sudo vim xxx.conf



update file:
 sudo vim /etc/nginx/sites-available/xxx.conf





5. Activating virtual host and testing results

sudo service nginx restart -> IF ERROR


----->  Stop Apache
If you don't need Apache, you can stop and disable it.

Stop Apache:


sudo systemctl stop apache2



sudo systemctl disable apache2



sudo systemctl start nginx



sudo systemctl status nginx


NOW: sudo service nginx restart




sudo ufw allow PORT     <------ instead of port the port we use





VERSION
_______


MAJOR.MINOR.PATCH → 1.0.0
Here's what each number means:
🔹 MAJOR (1.x.x): Breaking changes (big updates, API changes).
🔹 MINOR (1.1.x): New features (backward-compatible).
🔹 PATCH (1.1.1): Bug fixes & small improvements.

Examples
✅ 1.0.0 → First stable release.
✅ 1.1.0 → Added new features.
✅ 1.1.1 → Bug fixes, but no new features.
✅ 2.0.0 → Major breaking changes.








          IMPROVE DEV & WEB PERFORMANCE
          ______________________________


DEV:

     npm dedute -> in terminal vscode



https://www.youtube.com/watch?v=0fONene3OIA&ab_channel=BeyondFireship


LCP - Largest Contentful Paint  (Loading)
FID - First Input Delay (Interactivity)
CLS - Cumulative Layout Shift (Visual Stability)

Key is to messeare and optimise these things



IMG compression
_______________

https://squoosh.app/




          BREW INSTALLATION
          _________________

terminal:
1.brew
2.brew update
3.sudo chown -R $(whoami) $(brew --prefix)/*
4.brew upgrade




