Object Oriented Programming Leanguages  |   Functional Leanguages   |   Systems Leanguages  |   Modern Leanguages  |   Dynamic Leanguages
                                                                                                                       Scripting Leanguage
             Java                                                             Rust                                                   
                                                                                                                            Javascript




BRIEF JS HISTORY overview: js course lecture 30




          LEARNING ROADMAP
          ________________

https://www.youtube.com/watch?v=dPMk6_HTBq8&ab_channel=ConnerArdman


1. HTML
2. CSS                FONTEND
3. Javascript

4. Node JS + Express
5. Databases          BACKEND

6. VUE / React
7. Typescript         FRAMEWORKS and LIBRARYS (to simplify development)




BACKEND-STACK === 

https://medium.com/gdg-vit/which-backend-stack-should-you-learn-e4935dfe81bd


Tech Stack 1: Node.js, Express.js, and MongoDB

Tech Stack 2: Python, Django, and PostgreSQL

Tech Stack 3: Python, FastAPI, and PostgreSQL




          LOCAL DEVELOPMENT (without backend)
          _________________

terminal command: 
-> live-server

or live-server button in vscode




      Databases
      _________

SQL      |     NoSQL

mySQL         mongoDB

Firebase (maybe, should be nice)  is an hybrid of SQL and NoSQL




          Cloud Computing
          _______________
    
IaaS           |           PaaS            |           SaaS


·DigitalOcean




          2013 Future Skills (most recommended)
          _____________________________________

·Cyber Security




          FYI - HOW IS A WEBSITE OR PROGRAMM TESTED TO FIND OUT WHEN ITS COLLAPSING
          _________________________________________________________________________

FAB: through the socked and inodes the computer offers

most of the time, all stuff will be "LOAD BALANCED" over several systems




          HOSTING Guideline
          _________________ 
          
FIRST we host a node.js App !
SECOND we need a provider who supports node.js hosting !
     
HOSTING PROVIDERS:  alfahosting
                    digitalocean
                    godaddy



DOMAIN PART
___________

BUY a domain -> godaddy
CHANGE Nameservers at godaddy with the NS from digitalocean:

                                        ns1.digitalocean.com
                                        ns2.digitalocean.com
                                        ns3.digitalocean.com

GO to MAC (NOT digitalocean) Terminal: 

command: whois <domain>
         whois tbsshrdev.com


SCROLL DOWN (somewhere to the middle we should see:)

Domain Name: TBSSHRDEV.COM
   Registry Domain ID: 2810912145_DOMAIN_COM-VRSN
   Registrar WHOIS Server: whois.godaddy.com
   Registrar URL: http://www.godaddy.com
   Updated Date: 2023-09-09T07:01:26Z
   Creation Date: 2023-09-03T14:31:52Z
   Registry Expiry Date: 2024-09-03T14:31:52Z
   Registrar: GoDaddy.com, LLC
   Registrar IANA ID: 146
   Registrar Abuse Contact Email: abuse@godaddy.com
   Registrar Abuse Contact Phone: 480-624-2505
   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited
   Domain Status: clientRenewProhibited https://icann.org/epp#clientRenewProhibited
   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited
   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited
   Name Server: NS1.DIGITALOCEAN.COM
   Name Server: NS2.DIGITALOCEAN.COM
   Name Server: NS3.DIGITALOCEAN.COM


-> now we should see the 3 NS 

-> means we are successful connected



OR

https://de.godaddy.com/whois/results.aspx?domain=tbsshrdev.com

put in the domain youre looking for in the search field

-> look for the NS 



SSL CERTIFICATE PART
____________________

BUY SSL Certificate -> godaddy


https://ssltools.godaddy.com/views/certChecker



CODING PART
___________

1. Use Environment Variables:
- Avoid hard-codes values in your code, like sensitive data, like api keys, personal data etc.

For DEPLOYMENT:

const port = process.env.PORT || 3000; // for real deployment -> protected usage


2. set secure response headers  -> https://helmetjs.github.io

npm install helmet --save

var helmet = require('helmet');
 
 app.use(helmet());

 
3. Configure logging
4. Use SSL / TSL , important- but the most hoster make that for us 
5. change (picture etc.) paths/relative paths to -> https://......



DIGITALOCEAN - IaaS (Infastructure as a Service)
____________  

IaaS (Infastructure as a Service) = Digitalocean, AWS, Azure etc.


FAB

oben statt ubuntu auf debian
premium AMD -> mach auf regular (also die erste Auswahl)


https://www.digitalocean.com/community/tutorials/initial-server-setup-with-debian-10
https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-debian-10


DNS RECORDS und NAMESERVER einrichten   ->   https://docs.digitalocean.com/tutorials/dns-registrars/




SSH:   
____  

ssh root@ip  -> (ip vom droplet)

droplet pw entering => root host pw


to exit ssh connection:

in terminal: exit



SCP:   
____ 

 (file or folder TRANSFER to root server)  

in terminal:
scp -r folder name User name@HostIp:dropletname

scp -r file.tar root@ip:/root/file.tar   _/_/_/

scp -r app.js root@ip:/root/subfolder/app.js


multiple files at ones:
scp -r e58da54bfe2e0c7b.crt e58da54bfe2e0c7b.pem gd_bundle-g2-g1.crt key.pem root@46.101.155.88:


move multiple files at ones:

move  file       file    file destination
⬇️     ⬇️          ⬇️       ⬇️     ⬇️
mv bundle.crt cert.crt kp.pem tbsshrdev/





file directly:
scp app.js root@ip:/root/folder/app.js


digitalocean root: terminal commend: tar -xvf file.tar     -> zum tar entpacken


TAR create and extract

$ tar -cvf wanted file name   existing file



npm cache clean -f




PM2    
___

npm PM2     keeps the app running     https://pm2.keymetrics.io/docs/usage/quick-start/

npm install pm2@latest -g
sudo npm install pm2 -g

pm2 start app.js
pm2 stop app.js

pm2 delete <id>       clears the cache of pm2 from <id> 
pm2 delete all        clears the cache of pm2

pm2 monit             monitoring


pm2 start app.js      keeps pm2 running while changing the app       // VIDEO CHECK AGAIN for the command




          PORTS opening:    
          ______________  

https://www.digitalocean.com/community/tutorials/opening-a-port-on-linux


Netcat install:
sudo apt-get install netcat


OPEN PORT 443 (debian/linux):
sudo iptables -I INPUT -p tcp -m tcp –dport 443 -j ACCEPT




          SSL Cerfificate                 
          _______________

https://de.godaddy.com/help/fordern-sie-mein-ssl-zertifikat-fur-eine-primare-domain-in-meinem-godaddy-hostingkonto-an-etwa-linux-cpanel-windows-plesk-oder-eine-website-mit-website-baukasten-v7-40439    
      
https://stackoverflow.com/questions/11804202/how-do-i-setup-a-ssl-certificate-for-an-express-js-server     
      
https://stackoverflow.com/questions/11744975/enabling-https-on-express-js     _/_/_/


1. download the ssl key file from domain provider: 

https://de.godaddy.com/help/apache-generieren-einer-zertifikatsignieranforderung-csr-5269
-> in terminal WHEN BEEING IN THE DROPLET VIA SSH: 
-> openssl req -new -newkey rsa:2048 -nodes -keyout Ihre Domain.key -out Ihre Domain.csr


2. download the ssl certificate: https://certs.godaddy.com/cert/details/kopff41nq748tmdrw8pgpt6xjezbhwnc?cb=&app=


3. add the files to the root folder!



app.js file:

const fs = require('fs');
var privateKey = fs.readFileSync( 'privatekey.pem' );
var certificate = fs.readFileSync( 'certificate.pem' );


https.createServer({
    key: privateKey,
    cert: certificate
}, app).listen(443);        




OPTIONAL: https://www.ssl.com/how-to/manually-generate-a-certificate-signing-request-csr-using-openssl/




          IF THE BROWSER IS CHANGING AUTOMATICLY FROM HTTP to HTTPS 
          _________________________________________________________      
  
  -> https://superuser.com/questions/565409/how-to-stop-an-automatic-redirect-from-http-to-https-in-chrome
  
  
  HTTPS Website app.js setup
  
  https://stackoverflow.com/questions/11744975/enabling-https-on-express-js/11745114#11745114




          IMPROVE WEB PERFORMANCE
          _______________________

https://www.youtube.com/watch?v=0fONene3OIA&ab_channel=BeyondFireship


LCP - Largest Contentful Paint  (Loading)
FID - First Input Delay (Interactivity)
CLS - Cumulative Layout Shift (Visual Stability)

Key is to messeare and optimise these things




          BREW INSTALLATION
          _________________

terminal:
1.brew
2.brew update
3.sudo chown -R $(whoami) $(brew --prefix)/*
4.brew upgrade




